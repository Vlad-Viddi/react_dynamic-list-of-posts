{"version":3,"sources":["helpers/api.ts","components/LoadingButtons.tsx","components/User.tsx","components/Commentary.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","url","a","fetch","response","json","getAllPosts","Promise","all","postsFromServer","usersFromServer","commentsFromServer","map","post","user","find","id","userId","comments","filter","comment","postId","LoadingButtons","isLoading","errorMessage","posts","handleLoadClick","className","type","disabled","role","aria-hidden","onClick","hidden","length","User","name","email","address","city","street","suite","Commentary","body","CommentList","key","Post","title","PostList","useState","query","setQuery","filterQuery","setFilterQuery","setFilterQueryWithDebounce","useCallback","debounce","visiblePosts","useMemo","allPosts","searchQuery","pattern","RegExp","test","getVisiblePosts","noData","htmlFor","placeholder","value","onChange","event","target","App","setPosts","setIsLoading","setErrorMessage","preparedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61818ff7.chunk.js","sourcesContent":["// eslint-disable-next-line object-curly-newline\nimport { User, Comment, Post, PostWithUser } from './typeDefs';\n\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(BASE_URL + url);\n\n  return response.json();\n};\n\nexport const getPosts = () => getAll<Post>('/posts.json');\nexport const getUsers = () => getAll<User>('/users.json');\nexport const getComments = () => getAll<Comment>('/comments.json');\n\nexport const getAllPosts = async (): Promise<PostWithUser[]> => {\n  const [\n    postsFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n  return postsFromServer.map((post) => ({\n    ...post,\n    user: usersFromServer.find((user) => user.id === post.userId) as User,\n    comments: commentsFromServer.filter((comment) => comment.postId === post.id),\n\n  }));\n};\n","import React from 'react';\nimport { PostWithUser } from '../helpers/typeDefs';\n\ntype Props = {\n  isLoading: boolean;\n  errorMessage: string;\n  posts: PostWithUser[];\n  handleLoadClick: () => void;\n};\n\nconst LoadingButtons: React.FC<Props> = (\n  {\n    isLoading, errorMessage, posts, handleLoadClick,\n  },\n) => {\n  return (\n    isLoading\n      ? (\n        <button className=\"btn btn-primary\" type=\"button\" disabled>\n          <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n          Loading...\n        </button>\n      )\n      : (\n        <>\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            onClick={handleLoadClick}\n            hidden={posts.length !== 0}\n          >\n            <span role=\"status\" aria-hidden=\"true\" />\n            Load\n          </button>\n          <p\n            className=\"alert alert-primary mt5\"\n            hidden={errorMessage === ''}\n            role=\"alert\"\n          >\n            {`¯\\\\_(ツ)_/¯ ${errorMessage}`}\n          </p>\n        </>\n      )\n  );\n};\n\nexport default LoadingButtons;\n","import React from 'react';\nimport { Address } from '../helpers/typeDefs';\n\ntype Props = {\n  name: string;\n  email: string;\n  address: Address;\n};\n\nexport const User: React.FC<Props> = ({ name, email, address }) => (\n  <div>\n    <span>User:</span>\n    <p>\n      Name:\n      {name}\n    </p>\n    <p>\n      E-mail:\n      {email}\n    </p>\n    <p>\n      {`Address:${address.city}, ${address.street}, ${address.suite}`}\n    </p>\n  </div>\n);\n","import React from 'react';\n\ntype Props = {\n  name: string;\n  body: string;\n  email: string;\n};\n\nexport const Commentary: React.FC <Props> = ({ name, body, email }) => (\n  <div className=\"comment\">\n    <p>\n      {`Title: ${name}`}\n    </p>\n    <p>\n      {body}\n    </p>\n    <p>\n      {`E-mail: ${email}`}\n    </p>\n  </div>\n);\n","import React from 'react';\nimport { Commentary } from './Commentary';\nimport { Comment } from '../helpers/typeDefs';\n\ntype Props = {\n  comments: Comment[];\n};\n\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <span>Comments:</span>\n    {comments.map(comment => (\n      <div key={comment.id}>\n        <Commentary {...comment} />\n      </div>\n    ))}\n  </div>\n);\n","import React from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\nimport { PostWithUser } from '../helpers/typeDefs';\n\ntype Props ={\n  post: PostWithUser;\n};\n\nexport const Post: React.FC<Props> = ({ post }) => (\n  <div className=\"post\">\n    <h2>{post.title}</h2>\n    <p>{post.body}</p>\n    <User {...post.user} />\n    <CommentList comments={post.comments} />\n  </div>\n);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { PostWithUser } from '../helpers/typeDefs';\nimport { Post } from './Post';\n\n\ntype Props ={\n  posts: PostWithUser[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n  const getVisiblePosts = (allPosts: PostWithUser[], searchQuery: string) => {\n    const pattern = new RegExp(searchQuery, 'i');\n\n    return allPosts.filter(({ body, title }) => pattern.test(body + title));\n  };\n\n  const setFilterQueryWithDebounce = useCallback(debounce(setFilterQuery, 1000), []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setFilterQueryWithDebounce(event.target.value);\n  };\n\n  const visiblePosts = useMemo(() => getVisiblePosts(posts, filterQuery), [posts, filterQuery]);\n  const noData = visiblePosts.length;\n\n  return (\n    <div className=\"post__list\">\n      <label htmlFor=\"input\">\n        C&apos;mon, let&apos;s find\n        <input\n          type=\"text\"\n          placeholder=\" something interesting\"\n          className=\"ml5\"\n          id=\"input\"\n          value={query}\n          onChange={handleChange}\n        />\n      </label>\n      {noData === 0 && <p>No requested data here, friend</p>}\n\n      {visiblePosts.map(post => (\n        <div className=\"item\" key={post.id}>\n          <Post post={post} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getAllPosts } from './helpers/api';\nimport { PostWithUser } from './helpers/typeDefs';\nimport LoadingButtons from './components/LoadingButtons';\nimport { PostList } from './components/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<PostWithUser[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n    try {\n      const preparedPosts = await getAllPosts();\n\n      setPosts(preparedPosts);\n    } catch (error) {\n      setErrorMessage('Errors happens, try to reload');\n    }\n\n    setIsLoading(false);\n  };\n\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      <LoadingButtons\n        posts={posts}\n        isLoading={isLoading}\n        handleLoadClick={handleLoadClick}\n        errorMessage={errorMessage}\n      />\n      {posts.length !== 0\n        ? <PostList posts={posts} />\n        : ''}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}